# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Int!
  name: String!
  restaurants: [Restaurant!]
}

input CreateCategoryInput {
  name: String!
}

input CreateDishInput {
  description: String!
  name: String!
  picture: String!
  price: Float!
  quantity: Int!
  restaurantId: Int!
}

input CreateDriverInput {
  available: Boolean!
}

input CreateOrderInput {
  city: String!
  deliveryFee: Float!
  deliveryState: String!
  driverId: Int!
  orderNumber: Int!
  orderState: String!
  postalcode: String!
  province: String!
  restaurantId: Int!
  street: String!
  streetnumber: Int!
  totalPrice: Float!
  userId: Int!
}

input CreateOrdersHasDishInput {
  dishId: Int!
  orderId: Int!
  quantity: Int!
}

input CreatePaymentInput {
  orderId: Int!
  paidDate: Timestamp!
  paymentType: String!
  price: Float!
  userId: Int!
}

input CreateRestaurantInput {
  categoryId: Int!
  city: String!
  deliveryTime: Int!
  deliveryTimes: String!
  description: String!
  logo: String!
  name: String!
  picture: String!
  postalcode: String!
  province: String!
  street: String!
  streetnumber: Int!
  userId: Int!
}

input CreateReviewInput {
  date: Timestamp!
  description: String!
  rating: Int!
  restaurantId: Int!
  title: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String
  picture: String
  role: String!
  studentNumber: String
}

type Dish {
  description: String!
  id: Int!
  name: String!
  orderHasDishes: [OrdersHasDish!]
  picture: String!
  price: Float!
  quantity: Int!
  restaurant: Restaurant!
  restaurantId: Int!
}

type Driver {
  available: Boolean!
  id: Int!
  orders: [Order!]
}

type Mutation {
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createDish(createDishInput: CreateDishInput!): Dish!
  createDriver(createDriverInput: CreateDriverInput!): Driver!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  createOrdersHasDish(createOrdersHasDishInput: CreateOrdersHasDishInput!): OrdersHasDish!
  createPayment(createPaymentInput: CreatePaymentInput!): Payment!
  createRestaurant(createRestaurantInput: CreateRestaurantInput!): Restaurant!
  createReview(createReviewInput: CreateReviewInput!): Review!
  createUser(createUserInput: CreateUserInput!): User!
  removeCategory(id: Int!): Category!
  removeDish(id: Int!): Dish!
  removeDriver(id: Int!): Driver!
  removeOrder(id: Int!): Order!
  removeOrdersHasDish(id: Int!): OrdersHasDish!
  removePayment(id: Int!): Payment!
  removeRestaurant(id: Int!): Restaurant!
  removeReview(id: Int!): Review!
  removeUser(id: Int!): User!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  updateDish(updateDishInput: UpdateDishInput!): Dish!
  updateDriver(updateDriverInput: UpdateDriverInput!): Driver!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  updateOrdersHasDish(updateOrdersHasDishInput: UpdateOrdersHasDishInput!): OrdersHasDish!
  updatePayment(updatePaymentInput: UpdatePaymentInput!): Payment!
  updateRestaurant(updateRestaurantInput: UpdateRestaurantInput!): Restaurant!
  updateReview(updateReviewInput: UpdateReviewInput!): Review!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Order {
  city: String!
  deliveryFee: Float!
  deliveryState: String!
  driver: Driver!
  driverId: Int!
  id: Int!
  orderHasDishes: [OrdersHasDish!]
  orderNumber: Int!
  orderState: String!
  postalcode: String!
  province: String!
  restaurant: Restaurant!
  restaurantId: Int!
  street: String!
  streetnumber: Int!
  totalPrice: Float!
  user: User!
  userId: Int!
}

type OrdersHasDish {
  dish: Dish!
  dishId: Int!
  id: Int!
  order: Order!
  orderId: Int!
  quantity: Int!
}

type Payment {
  id: Int!
  orderId: Int!
  paidDate: Timestamp!
  paymentType: String!
  price: Float!
  user: User!
  userId: Int!
}

type Query {
  categories: [Category!]!
  category(id: Int!): Category!
  dishes: [Dish!]!
  driver(id: Int!): Driver!
  drivers: [Driver!]!
  findAllOrdersByRestaurantId(restaurantId: Int!): [Order!]!
  findOneUser(id: Int!): User!
  getDish(id: Int!): Dish!
  getRestaurantById(id: Int!): Restaurant!
  getRestaurantByUserId(userId: Int!): Restaurant!
  order(id: Int!): Order!
  orders: [Order!]!
  ordersHasDish(id: Int!): OrdersHasDish!
  ordersHasDishes: [OrdersHasDish!]!
  payment(id: Int!): Payment!
  payments: [Payment!]!
  restaurants: [Restaurant!]!
  restaurantsByCategoryAndProvince(categoryId: Int!, province: String!): [Restaurant!]!
  restaurantsByProvince(province: String!): [Restaurant!]!
  review(id: Int!): Review!
  reviews: [Review!]!
  userByEmail(email: String!): User!
  users: [User!]!
}

type Restaurant {
  category: Category!
  categoryId: Int!
  city: String!
  deliveryTime: Int!
  deliveryTimes: String!
  description: String!
  dishes: [Dish!]
  id: Int!
  logo: String!
  name: String!
  orders: [Order!]
  picture: String!
  postalcode: String!
  province: String!
  reviews: [Review!]
  street: String!
  streetnumber: Int!
  userId: Int!
}

type Review {
  date: Timestamp!
  description: String!
  id: Int!
  rating: Int!
  restaurant: [Restaurant!]
  restaurantId: Float!
  title: String!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateCategoryInput {
  id: Float!
  name: String
}

input UpdateDishInput {
  description: String!
  id: Int!
  name: String!
  picture: String!
  price: Float!
  quantity: Int!
  restaurantId: Int!
}

input UpdateDriverInput {
  available: Boolean
  id: Float!
}

input UpdateOrderInput {
  city: String
  deliveryFee: Float
  deliveryState: String
  driverId: Int
  id: Float!
  orderNumber: Int
  orderState: String
  postalcode: String
  province: String
  restaurantId: Int
  street: String
  streetnumber: Int
  totalPrice: Float
  userId: Int
}

input UpdateOrdersHasDishInput {
  dishId: Int
  id: Float!
  orderId: Int
  quantity: Int
}

input UpdatePaymentInput {
  id: Float!
  orderId: Int
  paidDate: Timestamp
  paymentType: String
  price: Float
  userId: Int
}

input UpdateRestaurantInput {
  categoryId: Int
  city: String
  deliveryTime: Int
  deliveryTimes: String
  description: String
  id: Int!
  logo: String
  name: String
  picture: String
  postalcode: String
  province: String
  street: String
  streetnumber: Int
  userId: Int
}

input UpdateReviewInput {
  date: Timestamp
  description: String
  id: Float!
  rating: Int
  restaurantId: Int
  title: String
}

input UpdateUserInput {
  email: String
  firstName: String
  id: Int!
  lastName: String
  password: String
  phone: String
  picture: String
  role: String
  studentNumber: String
}

type User {
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  orders: [Order!]
  password: String!
  payments: [Payment!]
  phone: String
  picture: String
  role: String!
  studentNumber: String
}
